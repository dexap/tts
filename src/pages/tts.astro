---
import '../styles/global.css';
import AdvancedSettings from '../components/AdvancedSettings.astro';
import AudioHistory from '../components/AudioHistory.astro';
import ToastNotification from '../components/ToastNotification.astro';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Sesame AI TTS - Voice Generation Studio</title>
		
		<!-- Basecoat UI CSS -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/basecoat-css@0.2.7/dist/basecoat.cdn.min.css">
		<script src="https://cdn.jsdelivr.net/npm/basecoat-css@0.2.7/dist/js/all.min.js" defer></script>
	</head>
	<body class="bg-gradient-to-br from-purple-50 via-white to-blue-50 min-h-screen">
		<!-- Fixed Logo in top-left corner -->
		<div class="fixed top-4 left-4 z-50">
			<h1 class="text-2xl font-light text-gray-800">
				<span class="text-purple-600">Sesame</span> AI
			</h1>
		</div>

		<div id="app" x-data="window.ttsApp()" x-init="console.log('Alpine.js initialized with TTS app')">
			<!-- Sticky Header (appears when scrolled) -->
			<div 
				x-show="isScrolled"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				x-transition:leave="transition ease-in duration-200"
				x-transition:leave-start="opacity-100"
				x-transition:leave-end="opacity-0"
				class="fixed top-0 left-0 right-0 z-40 bg-white/95 backdrop-blur-lg border-b border-gray-200/50 shadow-lg"
			>
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex items-center justify-center py-3">
						<!-- Compact Input + Generate Button (Centered) -->
						<div class="max-w-2xl w-full">
							<div class="relative flex items-center">
								<textarea
									x-model="textInput"
									:disabled="isGenerating"
									@focus="inputFocused = true"
									@blur="inputFocused = false"
									placeholder="Enter text to convert to speech..."
									class="flex-1 h-12 px-4 py-3 pr-16 text-base border-2 rounded-xl resize-none transition-all duration-300 focus:outline-none focus:ring-0 bg-white/90 backdrop-blur-sm shadow-sm"
									:class="inputFocused ? 'border-purple-500 shadow-md shadow-purple-500/10' : 'border-gray-200 hover:border-gray-300'"
									rows="1"
									style="overflow-y: hidden; min-height: 48px;"
									@input="$el.style.height = 'auto'; const newHeight = Math.min(Math.max($el.scrollHeight, 48), 120); $el.style.height = newHeight + 'px';"
									@keydown.enter.prevent="if (!$event.shiftKey && textInput.trim()) { generateSpeech(); }"
								></textarea>
								
								<!-- Compact Generate Button -->
								<button 
									@click="generateSpeech()"
									:disabled="!textInput.trim() || isGenerating"
									class="absolute right-2 p-2 bg-purple-600 text-white rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center"
									:class="isGenerating ? 'animate-pulse bg-purple-700' : 'hover:bg-purple-700'"
									title="Generate Speech"
								>
									<svg x-show="!isGenerating" class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
										<path fill-rule="evenodd" d="M14.615 1.595a.75.75 0 01.359.852L12.982 9.75h7.268a.75.75 0 01.548 1.262l-10.5 11.25a.75.75 0 01-1.272-.71L10.018 14.25H2.75a.75.75 0 01-.548-1.262l10.5-11.25a.75.75 0 01.913-.143z" clip-rule="evenodd" />
									</svg>
									<svg x-show="isGenerating" class="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
										<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
										<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
									</svg>
								</button>
								
								<!-- Character count for sticky -->
								<div 
									x-show="textInput.length > 0 && inputFocused"
									x-transition:enter="transition ease-out duration-200"
									x-transition:enter-start="opacity-0 scale-90"
									x-transition:enter-end="opacity-100 scale-100"
									class="absolute -bottom-6 right-2 text-xs text-gray-500 bg-white/90 px-2 py-1 rounded"
								>
									<span x-text="textInput.length"></span>/500
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Main Content Container -->
			<main class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 pt-8 transition-all duration-300"
				:class="isScrolled ? 'pt-20' : 'pt-8'">
				
				<!-- Central Input Section -->
				<div class="main-input-section mb-12 transition-all duration-500"
					x-show="true"
					x-transition:enter="transition ease-out duration-800 delay-300"
					x-transition:enter-start="opacity-0 transform translate-y-8"
					x-transition:enter-end="opacity-100 transform translate-y-0">
					
					<!-- Text Input with Google-like styling -->
					<div class="relative mb-8 max-w-4xl mx-auto">
						<textarea
							x-model="textInput"
							:disabled="isGenerating"
							@focus="inputFocused = true"
							@blur="inputFocused = false"
							placeholder="Enter text to convert to speech..."
							class="w-full h-40 px-8 py-8 text-xl border-2 rounded-3xl resize-none transition-all duration-300 focus:outline-none focus:ring-0 bg-white/90 backdrop-blur-sm shadow-lg"
							:class="inputFocused ? 'border-purple-500 shadow-xl shadow-purple-500/20 scale-[1.02]' : 'border-gray-200 hover:border-gray-300'"
						></textarea>
						
						<!-- Character count -->
						<div class="absolute bottom-4 right-6 text-sm text-gray-500"
							x-show="textInput.length > 0"
							x-transition:enter="transition ease-out duration-200"
							x-transition:enter-start="opacity-0 scale-90"
							x-transition:enter-end="opacity-100 scale-100">
							<span x-text="textInput.length"></span>/500
						</div>
					</div>

					<!-- Advanced Settings Toggle -->
					<div class="text-center mb-6">
						<button 
							@click="showSettings = !showSettings"
							class="text-gray-600 hover:text-purple-600 transition-colors duration-200 flex items-center mx-auto group"
						>
							<span x-text="showSettings ? 'Hide' : 'Show'"></span> 
							<span class="ml-1">advanced settings</span>
							<svg class="w-4 h-4 ml-2 transition-transform duration-200 group-hover:scale-110"
								:class="showSettings ? 'rotate-180' : ''"
								fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
							</svg>
						</button>
					</div>

					<!-- Advanced Settings Component -->
					<AdvancedSettings />

					<!-- Action Buttons -->
					<div class="flex justify-center mb-8"
						x-show="true"
						x-transition:enter="transition ease-out duration-800 delay-500"
						x-transition:enter-start="opacity-0 transform translate-y-8"
						x-transition:enter-end="opacity-100 transform translate-y-0">
						
						<!-- Generate Button -->
						<button 
							@click="generateSpeech()"
							:disabled="!textInput.trim() || isGenerating"
							class="px-10 py-4 bg-purple-600 text-white font-semibold rounded-2xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-purple-500/25 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none flex items-center space-x-3 text-lg"
							:class="isGenerating ? 'animate-pulse bg-purple-700' : 'hover:bg-purple-700'"
						>
							<svg x-show="!isGenerating" class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
								<path fill-rule="evenodd" d="M14.615 1.595a.75.75 0 01.359.852L12.982 9.75h7.268a.75.75 0 01.548 1.262l-10.5 11.25a.75.75 0 01-1.272-.71L10.018 14.25H2.75a.75.75 0 01-.548-1.262l10.5-11.25a.75.75 0 01.913-.143z" clip-rule="evenodd" />
							</svg>
							<svg x-show="isGenerating" class="animate-spin h-6 w-6" fill="none" viewBox="0 0 24 24">
								<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
								<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
							</svg>
							<span x-text="isGenerating ? 'Generating Audio...' : 'Generate Audio'"></span>
						</button>
					</div>

					<!-- Status Messages -->
					<div x-show="generationStatus" 
						x-transition:enter="transition ease-out duration-300"
						x-transition:enter-start="opacity-0 transform translate-y-4"
						x-transition:enter-end="opacity-100 transform translate-y-0"
						x-transition:leave="transition ease-out duration-200"
						x-transition:leave-start="opacity-100 transform translate-y-0"
						x-transition:leave-end="opacity-0 transform translate-y-4"
						class="text-center mb-8">
						<div class="inline-block px-6 py-3 rounded-2xl text-sm font-medium shadow-lg"
							:class="generationStatus && generationStatus.type === 'error' ? 'bg-red-100 text-red-700 border border-red-200' : 'bg-green-100 text-green-700 border border-green-200'">
							<span x-text="generationStatus && generationStatus.message"></span>
						</div>
					</div>
				</div>

				<!-- Audio History Component -->
				<AudioHistory />
			</main>

			<!-- Toast Notifications Component -->
			<ToastNotification />
		</div>

		<!-- TTS App Logic -->
		<script is:inline>
			// Global function for Alpine.js
			window.ttsApp = function() {
				return {
					// Form data
					textInput: '',
					voiceRole: '0',
					speechRate: 1.0,
					
					// Model selection
					selectedModel: 'sesame/csm-1b',
					availableModels: {},
					loadedModels: [],
					currentModel: 'sesame/csm-1b',
					isLoadingModel: false,
					
					// Advanced parameters
					temperature: 1.0,
					topP: 0.9,
					topK: 50,
					repetitionPenalty: 1.0,
					randomSeed: null,
					useRandomSeed: false,
					
					// UI state
					inputFocused: false,
					showSettings: false,
					showAdvancedParams: false,
					isScrolled: false,
					
					// Generation state
					isGenerating: false,
					generationStatus: null,
					
					// Audio state
					audioFiles: [],
					latestAudioFile: null,
					isPlaying: false,
					currentAudio: null,
					
					// UI state
					sortBy: 'date',
					sortOrder: 'desc',
					viewMode: 'grid',
					showAllFiles: false,
					
					// Toast notification
					toast: {
						show: false,
						type: 'info',
						title: '',
						message: ''
					},
					
					// Preset texts
					presets: [
						{
							title: 'Welcome Message',
							text: 'Hello! Welcome to our text-to-speech application. I\'m Elise, and I\'m excited to help you create natural-sounding speech.',
							role: '1'
						},
						{
							title: 'Product Demo',
							text: 'This innovative technology transforms written text into lifelike speech, perfect for accessibility, content creation, and communication.',
							role: '0'
						},
						{
							title: 'Storytelling',
							text: 'Once upon a time, in a digital realm where words came to life, there lived a voice named Elise who could speak any story with grace and emotion.',
							role: '2'
						},
						{
							title: 'News Reading',
							text: 'In today\'s technology news, artificial intelligence continues to advance, bringing new possibilities for human-computer interaction and communication.',
							role: '0'
						}
					],
					
					init() {
						console.log('Alpine.js TTS app initializing...');
						
						// Load available models first
						this.loadAvailableModels();
						
						// Load audio files from API first, then fallback to localStorage
						this.loadAudioFilesFromAPI().catch((error) => {
							console.error('Failed to load from API:', error);
							// Fallback to localStorage if API is not available
							this.loadAudioFiles();
						});
						
						// Auto-save to localStorage when audioFiles changes
						this.$watch('audioFiles', () => {
							this.saveAudioFiles();
						});
						
						// Setup scroll listener for sticky header
						this.setupScrollListener();
					},
					
					setupScrollListener() {
						const handleScroll = () => {
							// Trigger sticky header when scrolled past 200px
							const scrollY = window.scrollY;
							this.isScrolled = scrollY > 200;
							
							// Add smooth opacity transitions based on scroll position
							const mainSection = document.querySelector('.main-input-section');
							
							if (mainSection) {
								const fadeStart = 100;
								const fadeEnd = 300;
								
								if (scrollY > fadeEnd) {
									mainSection.style.opacity = '0';
									mainSection.style.pointerEvents = 'none';
									mainSection.style.transform = 'scale(0.95)';
								} else {
									mainSection.style.opacity = '1';
									mainSection.style.pointerEvents = 'auto';
									mainSection.style.transform = 'scale(1)';
								}
							}
						};
						
						// Initial check
						handleScroll();
						
						// Add scroll listener with throttling for performance
						let ticking = false;
						window.addEventListener('scroll', () => {
							if (!ticking) {
								requestAnimationFrame(() => {
									handleScroll();
									ticking = false;
								});
								ticking = true;
							}
						});
					},
					
					async loadAvailableModels() {
						try {
							const response = await fetch('/api/tts/models');
							if (response.ok) {
								const data = await response.json();
								if (data.success && data.models) {
									this.availableModels = data.models.available_models || {};
									this.loadedModels = data.models.loaded_models || [];
									this.currentModel = data.models.current_model || 'sesame/csm-1b';
									this.selectedModel = this.currentModel;
									console.log('Available models loaded:', this.availableModels);
								}
							}
						} catch (error) {
							console.error('Failed to load available models:', error);
						}
					},
					
					async switchModel() {
						if (this.selectedModel === this.currentModel) {
							return; // Already using this model
						}
						
						this.isLoadingModel = true;
						try {
							const action = this.loadedModels.includes(this.selectedModel) ? 'switch' : 'load';
							
							const response = await fetch('/api/tts/models', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									action: action,
									modelId: this.selectedModel
								})
							});
							
							if (response.ok) {
								const data = await response.json();
								if (data.success) {
									this.currentModel = this.selectedModel;
									if (!this.loadedModels.includes(this.selectedModel)) {
										this.loadedModels.push(this.selectedModel);
									}
									this.showToast('success', 'Model Switched', 
										`Now using ${this.availableModels[this.selectedModel] || this.selectedModel}`);
								} else {
									throw new Error(data.error || 'Failed to switch model');
								}
							} else {
								const errorData = await response.json();
								throw new Error(errorData.error || 'Failed to switch model');
							}
						} catch (error) {
							console.error('Error switching model:', error);
							this.showToast('error', 'Model Switch Failed', error.message);
							this.selectedModel = this.currentModel; // Revert selection
						} finally {
							this.isLoadingModel = false;
						}
					},
					
					resetAdvancedParams() {
						this.temperature = 1.0;
						this.topP = 0.9;
						this.topK = 50;
						this.repetitionPenalty = 1.0;
						this.randomSeed = null;
						this.useRandomSeed = false;
						this.showToast('info', 'Parameters Reset', 'Advanced parameters have been reset to defaults');
					},
					
					generateRandomSeed() {
						this.randomSeed = Math.floor(Math.random() * 1000000);
						this.useRandomSeed = true;
					},
					
					async loadAudioFilesFromAPI() {
						console.log('Loading audio files from API...');
						try {
							const response = await fetch('/api/tts/files');
							console.log('API response status:', response.status);
							if (response.ok) {
								const data = await response.json();
								console.log('API data received:', data);
								if (data.success && data.audioFiles) {
									this.audioFiles = data.audioFiles;
									console.log('Audio files loaded:', this.audioFiles.length, 'files');
								}
							} else {
								console.error('API response not ok:', response.status);
							}
						} catch (error) {
							console.error('Failed to load audio files from API:', error);
							throw error;
						}
					},
					
					async generateSpeech() {
						console.log('Generate button clicked!', this.textInput);
						
						if (!this.textInput.trim()) {
							this.showToast('error', 'Error', 'Please enter some text to generate speech.');
							return;
						}
						
						if (this.textInput.length > 500) {
							this.showToast('error', 'Error', 'Text must be 500 characters or less.');
							return;
						}
						
						this.isGenerating = true;
						this.generationStatus = { type: 'info', message: 'Connecting to Sesame AI...' };
						
						try {
							// Call the backend API
							const response = await fetch('/api/tts/generate', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									text: this.textInput,
									voiceRole: this.voiceRole,
									speechRate: this.speechRate,
									modelId: this.selectedModel,
									temperature: this.temperature,
									topP: this.topP,
									topK: this.topK,
									repetitionPenalty: this.repetitionPenalty,
									randomSeed: this.useRandomSeed ? this.randomSeed : null
								})
							});
							
							if (!response.ok) {
								const errorData = await response.json();
								throw new Error(errorData.error || 'Failed to generate speech');
							}
							
							const data = await response.json();
							
							if (data.success && data.audioFile) {
								// Add to audio files
								this.audioFiles.unshift(data.audioFile);
								
								// Set as latest audio file for the play button
								this.latestAudioFile = data.audioFile;
								
								// Reset form
								this.textInput = '';
								this.generationStatus = { type: 'success', message: 'Speech generated successfully!' };
								
								this.showToast('success', 'Success!', 'Your speech has been generated and saved.');
								
								// Refresh the file list
								await this.loadAudioFilesFromAPI();
							} else {
								throw new Error('Invalid response from server');
							}
							
							// Clear status after delay
							setTimeout(() => {
								this.generationStatus = null;
							}, 3000);
							
						} catch (error) {
							this.generationStatus = { type: 'error', message: 'Failed to generate speech. Please try again.' };
							this.showToast('error', 'Generation Failed', error.message || 'An error occurred while generating speech.');
						} finally {
							this.isGenerating = false;
						}
					},
					
					async simulateAPICall() {
						// Simulate network delay and processing
						await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
						
						// Simulate occasional API failures for demo
						if (Math.random() < 0.1) {
							throw new Error('Service temporarily unavailable');
						}
					},
					
					generateMockAudioUrl() {
						// In a real app, this would be the URL returned from the backend
						// For demo purposes, we'll use a data URL with a simple tone
						const duration = 2; // seconds
						const sampleRate = 44100;
						const frequency = 440; // A4 note
						
						// Create a simple sine wave audio
						const samples = duration * sampleRate;
						const audioBuffer = new ArrayBuffer(44 + samples * 2);
						const view = new DataView(audioBuffer);
						
						// WAV header
						const writeString = (offset, string) => {
							for (let i = 0; i < string.length; i++) {
								view.setUint8(offset + i, string.charCodeAt(i));
							}
						};
						
						writeString(0, 'RIFF');
						view.setUint32(4, 36 + samples * 2, true);
						writeString(8, 'WAVE');
						writeString(12, 'fmt ');
						view.setUint32(16, 16, true);
						view.setUint16(20, 1, true);
						view.setUint16(22, 1, true);
						view.setUint32(24, sampleRate, true);
						view.setUint32(28, sampleRate * 2, true);
						view.setUint16(32, 2, true);
						view.setUint16(34, 16, true);
						writeString(36, 'data');
						view.setUint32(40, samples * 2, true);
						
						// Generate audio samples
						for (let i = 0; i < samples; i++) {
							const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * 0.5;
							view.setInt16(44 + i * 2, sample * 32767, true);
						}
						
						const blob = new Blob([audioBuffer], { type: 'audio/wav' });
						return URL.createObjectURL(blob);
					},
					
					// Audio playback functions
					async playLatestAudio() {
						if (!this.latestAudioFile) {
							this.showToast('error', 'No Audio', 'No audio file available to play.');
							return;
						}
						
						await this.playAudioFile(this.latestAudioFile);
					},
					
					async playAudioFile(file) {
						try {
							// Stop current audio if playing
							if (this.currentAudio) {
								this.currentAudio.pause();
								this.currentAudio = null;
								this.isPlaying = false;
							}
							
							// Create new audio element
							this.currentAudio = new Audio(file.audioUrl);
							this.isPlaying = true;
							
							// Handle audio events
							this.currentAudio.addEventListener('ended', () => {
								this.isPlaying = false;
								this.currentAudio = null;
							});
							
							this.currentAudio.addEventListener('error', () => {
								this.isPlaying = false;
								this.currentAudio = null;
								this.showToast('error', 'Playback Error', 'Failed to play audio file.');
							});
							
							// Play the audio
							await this.currentAudio.play();
							
						} catch (error) {
							this.isPlaying = false;
							this.currentAudio = null;
							this.showToast('error', 'Playback Error', 'Failed to play audio file.');
						}
					},
					
					getTitle(text) {
						const words = text.trim().split(/\s+/).slice(0, 3);
						return words.join(' ') + (text.trim().split(/\s+/).length > 3 ? '...' : '');
					},
					
					estimateDuration(text) {
						// Estimate based on average speaking rate (150 words per minute)
						const words = text.trim().split(/\s+/).length;
						const minutes = words / 150;
						const seconds = Math.round(minutes * 60);
						
						if (seconds < 60) {
							return `${seconds}s`;
						} else {
							const mins = Math.floor(seconds / 60);
							const secs = seconds % 60;
							return `${mins}m ${secs}s`;
						}
					},
					
					estimateFileSize(text) {
						// Estimate file size based on text length and audio quality
						const words = text.trim().split(/\s+/).length;
						const estimatedSeconds = (words / 150) * 60;
						const sizeKB = Math.round(estimatedSeconds * 24); // Rough estimate for compressed audio
						
						if (sizeKB < 1024) {
							return `${sizeKB} KB`;
						} else {
							return `${(sizeKB / 1024).toFixed(1)} MB`;
						}
					},
					
					formatDate(date) {
						// European format: DD/MM/YYYY HH:MM
						const day = date.getDate().toString().padStart(2, '0');
						const month = (date.getMonth() + 1).toString().padStart(2, '0');
						const year = date.getFullYear();
						const hours = date.getHours().toString().padStart(2, '0');
						const minutes = date.getMinutes().toString().padStart(2, '0');
						
						return `${day}/${month}/${year} ${hours}:${minutes}`;
					},
					
					get sortedAudioFiles() {
						const sorted = [...this.audioFiles].sort((a, b) => {
							let aVal, bVal;
							
							if (this.sortBy === 'date') {
								aVal = a.timestamp;
								bVal = b.timestamp;
							} else if (this.sortBy === 'title') {
								aVal = a.title.toLowerCase();
								bVal = b.title.toLowerCase();
							}
							
							if (this.sortOrder === 'asc') {
								return aVal > bVal ? 1 : -1;
							} else {
								return aVal < bVal ? 1 : -1;
							}
						});
						
						return sorted;
					},
					
					async deleteAudioFile(id) {
						if (!confirm('Are you sure you want to delete this audio file?')) {
							return;
						}
						
						try {
							const response = await fetch(`/api/tts/files/${id}`, {
								method: 'DELETE'
							});
							
							if (response.ok) {
								// Remove from local array
								this.audioFiles = this.audioFiles.filter(file => file.id !== id);
								this.showToast('info', 'Deleted', 'Audio file has been deleted.');
							} else {
								const errorData = await response.json();
								throw new Error(errorData.error || 'Failed to delete file');
							}
						} catch (error) {
							this.showToast('error', 'Delete Failed', error.message || 'Failed to delete audio file.');
						}
					},
					
					clearAllFiles() {
						if (confirm('Are you sure you want to delete all audio files? This action cannot be undone.')) {
							this.audioFiles = [];
							this.showToast('info', 'Cleared', 'All audio files have been deleted.');
						}
					},
					
					downloadAudio(file) {
						// Create download link
						const link = document.createElement('a');
						link.href = file.audioUrl;
						link.download = `${file.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.wav`;
						document.body.appendChild(link);
						link.click();
						document.body.removeChild(link);
						
						this.showToast('success', 'Download Started', 'Audio file download has started.');
					},
					
					shareAudio(file) {
						if (navigator.share) {
							navigator.share({
								title: `TTS Audio: ${file.title}`,
								text: file.fullText,
								url: file.audioUrl
							});
						} else if (navigator.clipboard) {
							navigator.clipboard.writeText(file.audioUrl);
							this.showToast('success', 'Link Copied', 'Audio link has been copied to clipboard.');
						} else {
							this.showToast('info', 'Share', 'Sharing is not supported in this browser.');
						}
					},
					
					duplicateText(text) {
						this.textInput = text;
						this.showToast('success', 'Text Copied', 'Text has been copied to the input field.');
						
						// Scroll to top to show the text input
						window.scrollTo({ top: 0, behavior: 'smooth' });
					},
					
					loadAudioFiles() {
						try {
							const saved = localStorage.getItem('sesame_tts_audio_files');
							if (saved) {
								this.audioFiles = JSON.parse(saved);
							}
						} catch (error) {
							console.error('Failed to load audio files:', error);
						}
					},
					
					saveAudioFiles() {
						try {
							localStorage.setItem('sesame_tts_audio_files', JSON.stringify(this.audioFiles));
						} catch (error) {
							console.error('Failed to save audio files:', error);
						}
					},
					
					showToast(type, title, message) {
						this.toast = { show: true, type, title, message };
						
						// Auto-hide after 5 seconds
						setTimeout(() => {
							this.toast.show = false;
						}, 5000);
					}
				}
			}
			
			// Debug info
			console.log('TTS App loaded, ttsApp function available:', typeof window.ttsApp);
		</script>
		
		<!-- Alpine.js -->
		<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
	</body>
</html>
